{"version":3,"sources":["features/appSlice.js","SidebarChannel.js","features/userSlice.js","firebase.js","Sidebar.js","ChatHeader.js","Message.js","Chat.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["appSlice","createSlice","name","initialState","channelId","channelName","reducers","setChannelInfo","state","action","payload","actions","selectChannelId","app","selectChannelName","SidebarChannel","id","dispatch","useDispatch","className","onClick","userSlice","user","login","logout","selectUser","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Sidebar","useSelector","useState","channels","setChannels","useEffect","collection","onSnapshot","snapshot","docs","map","doc","channel","data","prompt","add","fontSize","Avatar","src","photo","signOut","displayName","uid","substring","ChatHeader","placeholder","Message","timestamp","message","Date","toDate","toUTCString","Chat","input","setInput","messages","setMessages","orderBy","value","disabled","onChange","e","target","preventDefault","FieldValue","serverTimestamp","type","Login","alt","Button","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","photoURL","email","store","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.206616bc.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const appSlice = createSlice({\n  name: 'app',\n  initialState: {\n    channelId: null,\n    channelName: null,\n  },\n  reducers: {\n    setChannelInfo: (state,action) => {\n     state.channelId = action.payload.channelId;\n     state.channelName = action.payload.channelName;\n    },\n  },\n});\n\nexport const {setChannelInfo} = appSlice.actions;\nexport const selectChannelId= (state) => state.app.channelId;\nexport const selectChannelName= (state) => state.app.channelName;\nexport default appSlice.reducer;\n","import React from 'react'\nimport {useDispatch} from \"react-redux\";\nimport {setChannelInfo} from \"./features/appSlice\";\nimport \"./SidebarChannel.css\";\n\nfunction SidebarChannel({id,channelName}) {\n    const dispatch = useDispatch();\n    return (\n        <div className=\"sidebarChannel\" \n        onClick={() =>\n         dispatch(\n             setChannelInfo({\n                channelId:id,\n                channelName: channelName,\n            })\n         )\n    }\n    >\n            <h4><span className='sidebarChannel__hash'>#</span>{channelName}</h4>\n        </div>\n    );\n}\nexport default SidebarChannel\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    user:null,\n  },\n  reducers: {\n    login: (state,action) => {\n     state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user =null;\n    }\n  },\n});\n\nexport const { login,logout } = userSlice.actions;\nexport const selectUser= (state) => state.user.user;\nexport default userSlice.reducer;\n","import firebase from \"firebase\"\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAJUrJi-pNXXBdbkqxMWg4NyQJ7iQ8gReY\",\n    authDomain: \"chatroom-c827e.firebaseapp.com\",\n    projectId: \"chatroom-c827e\",\n    storageBucket: \"chatroom-c827e.appspot.com\",\n    messagingSenderId: \"6991606734\",\n    appId: \"1:6991606734:web:360cbcaebc86c6767bf19f\",\n    measurementId: \"G-FPSX9BXJ3K\"\n  };\n\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\n  const db= firebaseApp.firestore()\n  const auth =firebase.auth();\n  const provider = new firebase.auth.GoogleAuthProvider();\n\n  export {auth,provider};\n  export default db;","import React,{useState,useEffect} from 'react'\nimport \"./Sidebar.css\"\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport AddIcon from '@material-ui/icons/Add';\nimport SidebarChannel from \"./SidebarChannel.js\"\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport CallIcon from '@material-ui/icons/Call';\nimport {Avatar } from '@material-ui/core';\nimport MicIcon from '@material-ui/icons/Mic';\nimport HeadsetIcon from '@material-ui/icons/Headset';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport {useSelector} from \"react-redux\"\nimport {selectUser} from \"./features/userSlice\";\nimport db,{ auth } from './firebase';\n\nfunction Sidebar() {\n    const user=useSelector(selectUser)\n    const [channels,setChannels] = useState([]);\n\n    useEffect(() =>{\n        db.collection('channels')\n        .onSnapshot(snapshot => (setChannels(snapshot.docs.map(doc=>(\n        {\n            id:doc.id,\n            channel:doc.data(),\n        }\n        )))))\n    })\n    const handleAddChannel=()=>{\n        const channelName = prompt(\"Enter a new channel name\");\n        if(channelName) {\n            db.collection(\"channels\").add({\n                channelName: channelName,\n            })\n        }\n    }\n    return (\n        <div className=\"sidebar\">\n            <div className=\"sidebar__top\">\n                <h3>Chat Room</h3>\n                <ExpandMoreIcon />\n            </div>\n\n        <div className=\"sidebar__channels\">\n            <div className=\"sidebar__channelsHeader\">\n                <div className=\"sidebar__header\">\n                    <ExpandMoreIcon/>\n                    <h4>Text Channels</h4>\n                    <AddIcon onClick={handleAddChannel} className=\"sidebar__addChannel\" />\n                </div>\n            </div>\n                <div className=\"sidebar__channelsList\">\n                    {channels.map(({id,channel}) =>\n                    <SidebarChannel key={id} id={id} channelName={channel.channelName}/>\n                    )}\n                </div>\n            </div>\n            <div className=\"sidebar__voice\">\n                <SignalCellularAltIcon \n                    className='sidebar__voiceIcon'\n                    fontSize=\"large\"/>\n            <div className=\"sidebar__voiceInfo\">\n                <h3>Voice Connected</h3>\n                <p>Stream</p>\n            </div>\n\n            <div className=\"sidebar__voiceIcons\">\n                <InfoOutlinedIcon />\n                <CallIcon />\n            </div>\n            \n            </div>\n            <div className=\"sidebar__profile\">\n                <Avatar src={user.photo} onClick={()=>auth.signOut()}/>\n                <div className=\"sidebar__profileInfo\">\n                    <h3>@{user.displayName}</h3>\n                    <p>#{user.uid.substring(0,5)}</p>\n                </div>\n                <div className=\"sidebar__profileIcons\">\n                    <MicIcon />\n                    <HeadsetIcon />\n                    <SettingsIcon />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Sidebar\n","import React from 'react'\nimport './ChatHeader.css'\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport EditLocationIcon from '@material-ui/icons/EditLocation';\nimport PeopleAltRoundedIcon from '@material-ui/icons/PeopleAltRounded';\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\nimport SendRoundedIcon from '@material-ui/icons/SendRounded';\nimport HelpRoundedIcon from '@material-ui/icons/HelpRounded';\n\n\nfunction ChatHeader({channelName}) {\n    return (\n        <div className='chatHeader'>\n            <div className=\"chatHeader__left\">\n                <h3>\n                    <span className=\"chatHeader__hash\">#</span>\n                    {channelName}\n                </h3>\n            </div>\n            <div className=\"chatHeader__right\">\n                <NotificationsIcon />\n                <EditLocationIcon />\n                <PeopleAltRoundedIcon />\n                <div className=\"chatHeader__search\">\n                    <input placeholder=\"Search\" />\n                    <SearchRoundedIcon />\n                </div>\n                <SendRoundedIcon />\n                <HelpRoundedIcon />\n            </div>\n        </div>\n    )\n}\n\nexport default ChatHeader\n","import React from 'react'\nimport {Avatar} from \"@material-ui/core\"\nimport './Message.css'\nfunction Message({timestamp,user,message}) {\n    return (\n        <div className=\"message\">\n            \n            <Avatar src={user.photo}/>\n            <div className=\"message__info\">\n                <h4> {user.displayName}\n                    <span className='message__timestamp'>{new Date(timestamp?.toDate()).toUTCString()}</span>\n                </h4>\n                <p>{message}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Message\n","import React, { useState, useEffect } from 'react'\nimport './Chat.css'\nimport ChatHeader from './ChatHeader.js'\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport CardGiftcardIcon from '@material-ui/icons/CardGiftcard';\nimport GifIcon from '@material-ui/icons/Gif';\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\nimport Message from \"./Message.js\"\nimport {useSelector} from \"react-redux\"\nimport { selectChannelId, selectChannelName } from './features/appSlice';\nimport { selectUser} from './features/userSlice';\nimport db from \"./firebase\"\nimport firebase from \"firebase\"\n\nfunction Chat() {\n    \n    const user = useSelector(selectUser);\n    const channelId = useSelector(selectChannelId);\n    const channelName = useSelector(selectChannelName);\n    const [input,setInput]=useState(\"\");\n    const [messages,setMessages]=useState([]);\n    useEffect(() => {\n        if(channelId){\n        db.collection('channels').doc(channelId).collection('messages')\n        .orderBy('timestamp','desc').onSnapshot((snapshot) =>\n            setMessages(snapshot.docs.map((doc)=>doc.data())));\n        }\n    }, [channelId])\n    const sendMessage = (e) => {\n        e.preventDefault();\n        db.collection('channels').doc(channelId).collection('messages').add({\n            timestamp:firebase.firestore.FieldValue.serverTimestamp(),\n            message:input,\n            user:user,\n        })\n        setInput(\"\");\n    }\n    return (\n        <div className=\"chat\">\n            <ChatHeader channelName={channelName}/>\n            <div className=\"chat__messages\">\n                {messages.map((message)=>\n                 <Message \n                    timestamp={message.timestamp}\n                    message={message.message}\n                    user={message.user}\n                />)}\n                \n            </div>\n            <div className=\"chat__input\">\n                <AddCircleIcon fontSize=\"large\"/>\n                <form>\n                    <input value={input} disabled={!channelId} onChange={(e) => setInput(e.target.value)} placeholder={'Message #TESTCHANNEL'}/>\n                    <button className='chat__inputButton' onClick={sendMessage} type='submit'>Send Message</button>\n                </form>\n\n                <div className=\"chat__inputIcons\">\n                    <CardGiftcardIcon fontSize=\"large\" />\n                    <GifIcon fontSize=\"large\" />\n                    <EmojiEmotionsIcon fontSize=\"large\" />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Chat\n","import React from 'react'\nimport {Button} from \"@material-ui/core\"\nimport \"./Login.css\"\nimport {auth,provider} from \"./firebase.js\"\nfunction Login() {\n    const signIn = () => {\n        auth.signInWithPopup(provider)\n        .catch((error)=>alert(error.message));\n    };\n    return (\n        <div className=\"login\">\n            <div className=\"login__logo\">\n\n            </div>\n            <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSmHOOgwFIeEeNbZePimffFCNPIhpmGAOGT4w&usqp=CAU\" alt=\"\" />\n            <Button onClick={signIn}>Sign In</Button>\n        </div>\n    );\n}\nexport default Login\n","import React,{useEffect} from 'react';\nimport {useSelector,useDispatch} from \"react-redux\"\nimport Sidebar from \"./Sidebar.js\"\nimport Chat from './Chat.js'\nimport Login from \"./Login.js\"\nimport './App.css';\nimport { auth } from './firebase.js';\nimport {selectUser,login,logout} from \"./features/userSlice\"\nfunction App() {\n  const dispatch = useDispatch();\n  const user = useSelector(selectUser);\n\n  useEffect(() => {\n    auth.onAuthStateChanged((authUser)=> {\n      if(authUser){\n          dispatch(\n            login({\n            uid: authUser.uid,\n            photo: authUser.photoURL,\n            email: authUser.email,\n            displayName:authUser.displayName,\n          }));\n      }else{\n        dispatch(\n          logout());\n      }\n    })\n  }, [dispatch])\n  return (\n    <div className=\"app\">\n      {user ? (\n        <>\n          <Sidebar />\n          <Chat />\n        </>\n      ):(\n          <Login />\n      )}\n      \n\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/userSlice';\nimport appReducer from '../features/appSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n    app: appReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}